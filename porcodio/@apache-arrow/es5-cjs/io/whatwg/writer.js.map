{"version":3,"sources":["io/whatwg/writer.ts"],"names":[],"mappings":";AAAA,6DAA6D;AAC7D,+DAA+D;AAC/D,wDAAwD;AACxD,6DAA6D;AAC7D,oDAAoD;AACpD,6DAA6D;AAC7D,6DAA6D;AAC7D,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,6DAA6D;AAC7D,8DAA8D;AAC9D,yDAAyD;AACzD,4DAA4D;AAC5D,0DAA0D;AAC1D,qBAAqB;;;;AAIrB,0CAAkD;AAGlD,cAAc;AACd,SAAgB,iCAAiC,CAE7C,gBAA6E,EAC7E,gBAAyD;IAGzD,IAAM,MAAM,GAAG,IAAI,IAAI,CAAI,gBAAgB,CAAC,CAAC;IAC7C,IAAM,MAAM,GAAG,IAAI,wBAAe,CAAC,MAAM,CAAC,CAAC;IAC3C,IAAM,QAAQ,GAAG,IAAI,cAAc,CAAC;QAChC,IAAI,EAAE,OAAO;QACP,MAAM;;;4BAAK,qBAAM,MAAM,CAAC,MAAM,EAAE,EAAA;;wBAArB,SAAqB,CAAC;;;;SAAE;QACnC,IAAI,YAAC,UAAU;;;4BAAI,qBAAM,IAAI,CAAC,UAAU,CAAC,EAAA;;wBAAtB,SAAsB,CAAC;;;;SAAE;QAC5C,KAAK,YAAC,UAAU;;;4BAAI,qBAAM,IAAI,CAAC,UAAU,CAAC,EAAA;;wBAAtB,SAAsB,CAAC;;;;SAAE;KACtD,qBAAI,eAAe,EAAE,SAAA,CAAC,EAAI,EAAE,CAAA,IAAK,gBAAgB,EAAG,CAAC;IAEtD,OAAO,EAAE,QAAQ,EAAE,IAAI,cAAc,CAAC,MAAM,EAAE,gBAAgB,CAAC,EAAE,QAAQ,UAAA,EAAE,CAAC;IAE5E,SAAe,IAAI,CAAC,UAAuD;;;;;;wBACnE,GAAG,GAAsB,IAAI,CAAC;wBAC9B,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC;;4BACrB,qBAAM,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAA;;6BAArC,CAAA,GAAG,GAAG,SAA+B,CAAA;wBACxC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;wBACxB,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;4BAAE,sBAAO;yBAAE;;;wBAElE,UAAU,CAAC,KAAK,EAAE,CAAC;;;;;KACtB;AACL,CAAC;AA1BD,8EA0BC","file":"writer.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number; size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n"]}