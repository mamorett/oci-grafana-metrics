{"version":3,"sources":["builder/union.ts"],"names":[],"mappings":"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","file":"union.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\nimport { Union, SparseUnion, DenseUnion } from '../type';\n\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\n\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\n        return this.set(this.length, value, childTypeId);\n    }\n\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        this._typeIds.set(index, childTypeId!);\n        super.setValue(index, value);\n    }\n\n    public addChild(child: Builder, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = <T> new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n\n    /** @ignore */\n    // @ts-ignore\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n\n/** @ignore */\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> {}\n/** @ignore */\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n\n    protected _offsets: DataBufferBuilder<Int32Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n\n    /** @ignore */\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\n        this._offsets.set(index, this.getChildAt(childIndex)!.length);\n        return super.setValue(index, value, childTypeId);\n    }\n}\n"]}