{"version":3,"sources":["data.ts"],"names":[],"mappings":";AAAA,6DAA6D;AAC7D,+DAA+D;AAC/D,wDAAwD;AACxD,6DAA6D;AAC7D,oDAAoD;AACpD,6DAA6D;AAC7D,6DAA6D;AAC7D,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,6DAA6D;AAC7D,8DAA8D;AAC9D,yDAAyD;AACzD,4DAA4D;AAC5D,0DAA0D;AAC1D,qBAAqB;;;AAGrB,kCAA4C;AAC5C,kCAA8C;AAC9C,+BAAqD;AACrD,+BAA0E;AAC1E,wCAA8E;AAc9E,cAAc,CAAc,QAAA,iBAAiB,GAAG,CAAC,CAAC,CAAC;AAsBnD,cAAc;AACd;IA4CI,cAAY,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAkB,EAAE,OAAuC,EAAE,SAA6B,EAAE,UAAmB;QAChK,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,IAAI,CAAC,SAAS,GAAG,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,YAAY,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAA9B,CAA8B,CAAW,CAAC;QACxF,IAAI,MAAoC,CAAC;QACzC,IAAI,OAAO,YAAY,IAAI,EAAE;YACzB,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YAC7B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;YAC/B,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;YACrC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;SAC5C;aAAM;YACH,IAAI,CAAC,MAAM,GAAG,oBAAa,CAAC,IAAI,CAAC,CAAC;YAClC,IAAI,OAAO,EAAE;gBACT,CAAC,MAAM,GAAI,OAAsB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,CAAC;gBACtE,CAAC,MAAM,GAAI,OAAsB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;gBAChE,CAAC,MAAM,GAAI,OAAsB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,CAAC;gBACpE,CAAC,MAAM,GAAI,OAAsB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC;aACpE;SACJ;IACL,CAAC;IAjDD,sBAAW,wBAAM;aAAjB,cAAkC,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;;;OAAA;IAC5D,sBAAW,2BAAS;aAApB,cAAyC,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;;;OAAA;IACtE,sBAAW,yBAAO;aAAlB;YACI,OAAO,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAe,CAAC;QACzF,CAAC;;;OAAA;IACD,sBAAW,4BAAU;aAArB;YACI,IAAI,UAAU,GAAG,CAAC,CAAC;YACb,IAAA,KAAgD,IAAI,EAAlD,YAAY,kBAAA,EAAE,MAAM,YAAA,EAAE,UAAU,gBAAA,EAAE,OAAO,aAAS,CAAC;YAC3D,YAAY,IAAI,CAAC,UAAU,IAAI,YAAY,CAAC,UAAU,CAAC,CAAC;YACxD,MAAM,IAAU,CAAC,UAAU,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;YAClD,UAAU,IAAM,CAAC,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC,CAAC;YACtD,OAAO,IAAS,CAAC,UAAU,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC;YACnD,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAC,UAAU,EAAE,KAAK,IAAK,OAAA,UAAU,GAAG,KAAK,CAAC,UAAU,EAA7B,CAA6B,EAAE,UAAU,CAAC,CAAC;QACnG,CAAC;;;OAAA;IAID,sBAAW,2BAAS;aAApB;YACI,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;YAChC,IAAI,UAAkC,CAAC;YACvC,IAAI,SAAS,IAAI,yBAAiB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE;gBAClE,IAAI,CAAC,UAAU,GAAG,SAAS,GAAG,IAAI,CAAC,MAAM,GAAG,sBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;aACpH;YACD,OAAO,SAAS,CAAC;QACrB,CAAC;;;OAAA;IA2BM,oBAAK,GAAZ,UAAiC,IAAO,EAAE,MAAoB,EAAE,MAAoB,EAAE,SAA2B,EAAE,OAAgC,EAAE,SAA6C;QAAxJ,uBAAA,EAAA,SAAS,IAAI,CAAC,MAAM;QAAE,uBAAA,EAAA,SAAS,IAAI,CAAC,MAAM;QAAE,0BAAA,EAAA,YAAY,IAAI,CAAC,UAAU;QAAE,wBAAA,EAAA,UAA4B,IAAI;QAAE,0BAAA,EAAA,YAA+B,IAAI,CAAC,SAAS;QAC9L,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IAC1F,CAAC;IAEM,oBAAK,GAAZ,UAAa,MAAc,EAAE,MAAc;QACjC,IAAA,KAAgC,IAAI,EAAlC,MAAM,YAAA,EAAE,MAAM,YAAA,EAAE,SAAS,eAAS,CAAC;QAC3C,2CAA2C;QAC3C,4CAA4C;QAC5C,2CAA2C;QAC3C,IAAM,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;QAC/C,IAAM,WAAW,GAAG,MAAM,KAAK,EAAE,CAAC,mBAAmB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACnE,IAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC,KAAK,CAAI,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO;QAC5E,2EAA2E;QAC3E,CAAC,CAAC,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,GAAG,MAAM,EAAE,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3I,CAAC;IAEM,iDAAkC,GAAzC,UAA0C,SAAiB;QACvD,IAAI,IAAI,CAAC,MAAM,KAAK,WAAI,CAAC,IAAI,EAAE;YAC3B,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;SACjD;QACK,IAAA,KAAwB,IAAI,EAA1B,MAAM,YAAA,EAAE,SAAS,eAAS,CAAC;QACnC,mFAAmF;QACnF,IAAM,MAAM,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,SAAS,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,IAAI,CAAC,CAAC,CAAC;QACvF,sFAAsF;QACtF,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAC1D,8EAA8E;QAC9E,IAAI,SAAS,GAAG,CAAC,EAAE;YACf,MAAM,CAAC,GAAG,CAAC,oBAAc,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;SACvE;QACD,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;QACtC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,SAAS,EAAE,SAAS,GAAG,CAAC,SAAS,GAAG,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC;IAC1F,CAAC;IAES,4BAAa,GAAvB,UAAwB,MAAc,EAAE,MAAc,EAAE,MAAc,EAAE,MAAkB;QACtF,IAAI,GAAQ,CAAC;QACL,IAAA,OAAO,GAAK,IAAI,QAAT,CAAU;QACzB,6CAA6C;QAC7C,CAAC,GAAG,GAAG,OAAO,CAAC,iBAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAU,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC;QACvG,kDAAkD;QAClD,CAAC,GAAG,GAAG,OAAO,CAAC,iBAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAU,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC;YAC9G,oIAAoI;YACpI,CAAC,GAAG,GAAG,OAAO,CAAC,iBAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAU,CAAC,IAAI,CAAC,GAAG,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,EAAE,MAAM,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAChJ,OAAO,OAAO,CAAC;IACnB,CAAC;IAES,6BAAc,GAAxB,UAAyB,SAAiB,EAAE,MAAc,EAAE,MAAc;QACtE,OAAO,SAAS,CAAC,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,EAA3B,CAA2B,CAAC,CAAC;IACjE,CAAC;IAED,EAAE;IACF,qFAAqF;IACrF,EAAE;IACF,kBAAkB;IACJ,QAAG,GAAjB,UAAsC,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAkB,EAAE,OAAuC,EAAE,SAA6B,EAAE,UAAmB;QAC1L,IAAI,OAAO,YAAY,IAAI,EAAE;YAAE,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;SAAE;aAAM,IAAI,CAAC,OAAO,EAAE;YAAE,OAAO,GAAG,EAAyB,CAAC;SAAE;QACvH,QAAQ,IAAI,CAAC,MAAM,EAAE;YACjB,KAAK,WAAI,CAAC,IAAI,CAAC,CAAY,OAAiB,IAAI,CAAC,IAAI,CAAuB,IAAY,EAAa,MAAM,EAAE,MAAM,CAAY,CAAC;YAChI,KAAK,WAAI,CAAC,GAAG,CAAC,CAAa,OAAiB,IAAI,CAAC,GAAG,CAAwB,IAAW,EAAc,MAAM,EAAE,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAY,CAAC;YAC9M,KAAK,WAAI,CAAC,UAAU,CAAC,CAAM,OAAiB,IAAI,CAAC,UAAU,CAAiB,IAAkB,EAAO,MAAM,EAAE,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,UAAW,CAAY,CAAC;YAC3N,KAAK,WAAI,CAAC,KAAK,CAAC,CAAW,OAAiB,IAAI,CAAC,KAAK,CAAsB,IAAa,EAAY,MAAM,EAAE,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAY,CAAC;YAC9M,KAAK,WAAI,CAAC,IAAI,CAAC,CAAY,OAAiB,IAAI,CAAC,IAAI,CAAuB,IAAY,EAAa,MAAM,EAAE,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAY,CAAC;YAC9M,KAAK,WAAI,CAAC,OAAO,CAAC,CAAS,OAAiB,IAAI,CAAC,OAAO,CAAoB,IAAe,EAAU,MAAM,EAAE,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAY,CAAC;YAC9M,KAAK,WAAI,CAAC,IAAI,CAAC,CAAY,OAAiB,IAAI,CAAC,IAAI,CAAuB,IAAa,EAAY,MAAM,EAAE,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAY,CAAC;YAC9M,KAAK,WAAI,CAAC,IAAI,CAAC,CAAY,OAAiB,IAAI,CAAC,IAAI,CAAuB,IAAY,EAAa,MAAM,EAAE,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAY,CAAC;YAC9M,KAAK,WAAI,CAAC,SAAS,CAAC,CAAO,OAAiB,IAAI,CAAC,SAAS,CAAkB,IAAiB,EAAQ,MAAM,EAAE,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAY,CAAC;YAC9M,KAAK,WAAI,CAAC,QAAQ,CAAC,CAAQ,OAAiB,IAAI,CAAC,QAAQ,CAAmB,IAAgB,EAAS,MAAM,EAAE,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAY,CAAC;YAC9M,KAAK,WAAI,CAAC,eAAe,CAAC,CAAC,OAAiB,IAAI,CAAC,eAAe,CAAY,IAAuB,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAY,CAAC;YAC9M,KAAK,WAAI,CAAC,MAAM,CAAC,CAAU,OAAiB,IAAI,CAAC,MAAM,CAAqB,IAAc,EAAW,MAAM,EAAE,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,iBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAY,CAAC;YAChP,KAAK,WAAI,CAAC,IAAI,CAAC,CAAY,OAAiB,IAAI,CAAC,IAAI,CAAuB,IAAY,EAAa,MAAM,EAAE,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,iBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAY,CAAC;YAChP,KAAK,WAAI,CAAC,IAAI,CAAC,CAAY,OAAiB,IAAI,CAAC,IAAI,CAAuB,IAAY,EAAa,MAAM,EAAE,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAY,CAAC;YACtO,KAAK,WAAI,CAAC,aAAa,CAAC,CAAG,OAAiB,IAAI,CAAC,aAAa,CAAc,IAAqB,EAAI,MAAM,EAAE,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAY,CAAC;YACpM,KAAK,WAAI,CAAC,MAAM,CAAC,CAAU,OAAiB,IAAI,CAAC,MAAM,CAAqB,IAAc,EAAW,MAAM,EAAE,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,SAAS,IAAI,EAAE,CAAY,CAAC;YAC/L,KAAK,WAAI,CAAC,GAAG,CAAC,CAAa,OAAiB,IAAI,CAAC,GAAG,CAAwB,IAAY,EAAa,MAAM,EAAE,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAY,CAAC;YACtO,KAAK,WAAI,CAAC,KAAK,CAAC,CAAW,OAAiB,IAAI,CAAC,KAAK,CAAsB,IAAa,EAAY,MAAM,EAAE,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,iBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,iBAAU,CAAC,MAAM,CAAC,IAAI,SAAS,EAAE,SAAS,CAAY,CAAC;SACrQ;QACD,MAAM,IAAI,KAAK,CAAC,yBAAuB,IAAI,CAAC,MAAQ,CAAC,CAAC;IAC1D,CAAC;IAED,kBAAkB;IACJ,SAAI,GAAlB,UAAmC,IAAO,EAAE,MAAc,EAAE,MAAc;QACtE,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IAC7C,CAAC;IACD,kBAAkB;IACJ,QAAG,GAAjB,UAAiC,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAiB,EAAE,UAAsB,EAAE,IAAmB;QACpI,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,SAAS,EAAE,0BAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,qBAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACrI,CAAC;IACD,kBAAkB;IACJ,eAAU,GAAxB,UAA+C,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAiB,EAAE,UAAsB,EAAE,IAAmB,EAAE,UAAmC;QACvL,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,SAAS,EAAE,0BAAiB,CAAc,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,qBAAY,CAAC,UAAU,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;IAC1K,CAAC;IACD,kBAAkB;IACJ,UAAK,GAAnB,UAAqC,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAiB,EAAE,UAAsB,EAAE,IAAmB;QACxI,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,SAAS,EAAE,0BAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,qBAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACrI,CAAC;IACD,kBAAkB;IACJ,SAAI,GAAlB,UAAmC,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAiB,EAAE,UAAsB,EAAE,IAAmB;QACtI,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,SAAS,EAAE,0BAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,qBAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACrI,CAAC;IACD,kBAAkB;IACJ,YAAO,GAArB,UAAyC,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAiB,EAAE,UAAsB,EAAE,IAAmB;QAC5I,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,SAAS,EAAE,0BAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,qBAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACrI,CAAC;IACD,kBAAkB;IACJ,SAAI,GAAlB,UAAoC,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAiB,EAAE,UAAsB,EAAE,IAAmB;QACvI,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,SAAS,EAAE,0BAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,qBAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACrI,CAAC;IACD,kBAAkB;IACJ,SAAI,GAAlB,UAAmC,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAiB,EAAE,UAAsB,EAAE,IAAmB;QACtI,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,SAAS,EAAE,0BAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,qBAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACrI,CAAC;IACD,kBAAkB;IACJ,cAAS,GAAvB,UAA6C,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAiB,EAAE,UAAsB,EAAE,IAAmB;QAChJ,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,SAAS,EAAE,0BAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,qBAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACrI,CAAC;IACD,kBAAkB;IACJ,aAAQ,GAAtB,UAA2C,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAiB,EAAE,UAAsB,EAAE,IAAmB;QAC9I,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,SAAS,EAAE,0BAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,qBAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACrI,CAAC;IACD,kBAAkB;IACJ,oBAAe,GAA7B,UAAyD,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAiB,EAAE,UAAsB,EAAE,IAAmB;QAC5J,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,SAAS,EAAE,0BAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,qBAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACrI,CAAC;IACD,kBAAkB;IACJ,WAAM,GAApB,UAAuC,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAiB,EAAE,UAAsB,EAAE,YAAgC,EAAE,IAAmB;QAC5K,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,qBAAY,CAAC,YAAY,CAAC,EAAE,qBAAY,CAAC,IAAI,CAAC,EAAE,qBAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACjI,CAAC;IACD,kBAAkB;IACJ,SAAI,GAAlB,UAAmC,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAiB,EAAE,UAAsB,EAAE,YAAgC,EAAE,IAAmB;QACxK,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,qBAAY,CAAC,YAAY,CAAC,EAAE,qBAAY,CAAC,IAAI,CAAC,EAAE,qBAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACjI,CAAC;IACD,kBAAkB;IACJ,SAAI,GAAlB,UAAmC,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAiB,EAAE,UAAsB,EAAE,YAAgC,EAAE,KAAoD;QACzM,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,qBAAY,CAAC,YAAY,CAAC,EAAE,SAAS,EAAE,qBAAY,CAAC,UAAU,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAC9I,CAAC;IACD,kBAAkB;IACJ,kBAAa,GAA3B,UAAqD,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAiB,EAAE,UAAsB,EAAE,KAAoD;QACzL,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,qBAAY,CAAC,UAAU,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAC7H,CAAC;IACD,kBAAkB;IACJ,WAAM,GAApB,UAAuC,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAiB,EAAE,UAAsB,EAAE,QAA2B;QAClJ,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,qBAAY,CAAC,UAAU,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjH,CAAC;IACD,kBAAkB;IACJ,QAAG,GAAjB,UAAkC,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAiB,EAAE,UAAsB,EAAE,YAAgC,EAAE,KAAsB;QAC1K,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,qBAAY,CAAC,YAAY,CAAC,EAAE,SAAS,EAAE,qBAAY,CAAC,UAAU,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAC9I,CAAC;IAID,kBAAkB;IACJ,UAAK,GAAnB,UAAqC,IAAO,EAAE,MAAc,EAAE,MAAc,EAAE,SAAiB,EAAE,UAAsB,EAAE,OAAsB,EAAE,sBAA8D,EAAE,QAA4B;QACzO,IAAM,OAAO,GAAa;YACtB,SAAS,EAAE,SAAS;YACpB,qBAAY,CAAC,UAAU,CAAC;YACxB,0BAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC;SACtB,CAAC;QACzB,IAAI,IAAI,CAAC,IAAI,KAAK,gBAAS,CAAC,MAAM,EAAE;YAChC,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,sBAA2C,CAAC,CAAC;SAC1G;QACD,OAAO,CAAC,iBAAU,CAAC,MAAM,CAAC,GAAG,qBAAY,CAAsB,sBAAsB,CAAC,CAAC;QACvF,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACxE,CAAC;IACL,WAAC;AAAD,CAzOA,AAyOC,IAAA;AAzOY,oBAAI;AA2OhB,IAAI,CAAC,SAAiB,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC","file":"data.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { DataType, SparseUnion, DenseUnion, strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    public dictionary?: Vector;\n\n    public readonly values!: Buffers<T>[BufferType.DATA];\n    public readonly typeIds!: Buffers<T>[BufferType.TYPE];\n    public readonly nullBitmap!: Buffers<T>[BufferType.VALIDITY];\n    public readonly valueOffsets!: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        const { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values       && (byteLength += values.byteLength);\n        nullBitmap   && (byteLength += nullBitmap.byteLength);\n        typeIds      && (byteLength += typeIds.byteLength);\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector) {\n        this.type = type;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, childData } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any;\n        const { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary!) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number) {\n        return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>, dictionary: Vector<T['dictionary']>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], child ? [child] : []);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], child ? [child] : []);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: (Data | Vector)) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], child ? [child] : []);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n(Data.prototype as any).childData = Object.freeze([]);\n"]}