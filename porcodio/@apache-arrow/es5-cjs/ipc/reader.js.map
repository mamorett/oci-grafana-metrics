{"version":3,"sources":["ipc/reader.ts"],"names":[],"mappings":"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","file":"reader.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer(): Footer | null { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>; readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    public schema!: Schema<T>;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            return (dictionary && isDelta ? dictionary.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n        }\n        return dictionary;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null;\n        const { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null;\n        const { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    protected _footer?: Footer;\n    protected _handle!: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    protected _handle!: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n"]}